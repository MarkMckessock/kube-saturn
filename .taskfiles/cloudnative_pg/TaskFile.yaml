---
version: "3"

x-task-vars: &task-vars
  dbUser: '{{.dbUser}}'
  dbName: '{{.dbName}}'
  dbPassword: '{{.dbPassword}}'
  namespace: '{{.namespace}}'
  dbPath: '{{.dbPath}}'
  pvcName: '{{.pvcName}}'

vars:
  CNPG_RESOURCES_DIR: '{{.ROOT_DIR}}/.taskfiles/cloudnative_pg/resources'

tasks:
  init-db:
    desc: Create a new cloudnative-pg database with a provided user
    cmds:
      - minijinja-cli {{.CNPG_RESOURCES_DIR}}/init-db.yaml.j2 | kubectl apply --server-side --filename -
    env:
      DB_NAME: '{{.DB_NAME}}'
      DB_USER: '{{.DB_USER}}'
      DB_PASSWORD: '{{.DB_PASSWORD}}'
    requires:
      vars: [DB_NAME, DB_USER, DB_PASSWORD]
  backup:
    desc: Create a backup of a cloudnative-pg database
    cmds:
      - minijinja-cli {{.CNPG_RESOURCES_DIR}}/db-backup.yaml.j2 | kubectl apply --server-side --filename -
    env:
      DB_NAME: '{{.DB_NAME}}'
    requires:
      vars: [DB_NAME]
    vars:
      DB_NAME: '{{ or .DB_NAME (fail "Database name is required") }}'
  restore:
    desc: Restore a backup of a cloudnative-pg database
    cmds:
      - minijinja-cli {{.CNPG_RESOURCES_DIR}}/db-restore.yaml.j2 | kubectl apply --server-side --filename -
    env:
      DB_NAME: '{{.DB_NAME}}'
    requires:
      vars: [DB_NAME]
  pgloader:
    desc: Load an sqlite database into cloudnative-pg
    cmds:
      - envsubst < <(cat "{{.loader_template}}") | kubectl apply -f -
    env: *task-vars
    vars:
      dbName: '{{ or .dbName (fail "Database name is required") }}'
      dbUser: '{{ or .dbUser (fail "Database User is required") }}'
      dbPassword: '{{ or .dbPassword (fail "Database password is required") }}'
      dbPath: '{{ or .dbPath (fail "SQLite database path is required") }}'
      pvcName: '{{ or .pvcName (fail "PVC name is required") }}'
      namespace: '{{.namespace | default "default"}}'
