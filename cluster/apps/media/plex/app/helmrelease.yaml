apiVersion: helm.toolkit.fluxcd.io/v2beta1
kind: HelmRelease
metadata:
  name: plex
  namespace: media
spec:
  interval: 15m
  chart:
    spec:
      chart: app-template
      version: 1.2.1
      sourceRef:
        kind: HelmRepository
        name: bjw-s
        namespace: flux-system
  maxHistory: 3
  install:
    createNamespace: true
    remediation:
      retries: 3
  upgrade:
    cleanupOnFail: true
    remediation:
      retries: 3
  uninstall:
    keepHistory: false
  values:
    controller:
    image:
      repository: ghcr.io/onedr0p/plex
      tag: 1.30.0.6486-629d58034@sha256:b3e3a2a305443f243643553161cff639f3dcc74349595884ac9c77cf6bb24068
    env:
      TZ: "America/Toronto"
    service:
      main:
        type: LoadBalancer
        externalIPs: ["${PLEX_IP}"]
        externalTrafficPolicy: Local
        ports:
          http:
            port: 32400
    ingress:
      main:
        enabled: true
        ingressClassName: nginx
        annotations:
          external-dns.home.arpa/enabled: "true"
          nginx.ingress.kubernetes.io/backend-protocol: "HTTPS"
          kubernetes.io/tls-acme: "true"
          cert-manager.io/cluster-issuer: ${CLUSTER_ISSUER}
        hosts:
          - host: &host "{{ .Release.Name }}.${DOMAIN}"
            paths:
              - path: /
                pathType: Prefix
        tls:
          - hosts:
              - *host
    podSecurityContext:
      runAsUser: 1000
      runAsGroup: 1000
      fsGroup: 1000
      fsGroupChangePolicy: "OnRootMismatch"
    persistence:
      config:
        enabled: true
        type: pvc
        size: 100Gi
        accessMode: ReadWriteOnce
        mountPath: /config
        storageClass: longhorn
        retain: true
      media:
        enabled: true
        type: nfs
        server: ${NFS_SERVER}
        path: /volume1/Media
        mountPath: /data
        readOnly: true
      transcode:
        enabled: true
        type: emptyDir
    # nodeSelector:
    #   node-role.kubernetes.io/worker: "true"
    #   intel.feature.node.kubernetes.io/gpu: "true"
    # affinity:
    #   podAntiAffinity:
    #     requiredDuringSchedulingIgnoredDuringExecution:
    #       - labelSelector:
    #           matchExpressions:
    #             - key: app.kubernetes.io/name
    #               operator: In
    #               values: ["frigate"]
    #         topologyKey: kubernetes.io/hostname
    resources:
      requests:
        # gpu.intel.com/i915: 1
        cpu: 100m
        memory: 2000Mi
      limits:
        # gpu.intel.com/i915: 1
        memory: 10000Mi